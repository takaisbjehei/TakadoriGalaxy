<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>TakaGalaxy Chat</title>
  <script src="https://cdn.tailwindcss.com"></script>
  <script src="https://cdn.jsdelivr.net/npm/@supabase/supabase-js@2"></script>
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" />
  <style>
    @import url('https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700&display=swap');
    
    :root {
      --bg-primary: #1e1f29;
      --bg-secondary: #2a2b36;
      --bg-tertiary: #3a3b4a;
      --accent-primary: #6366f1;
      --accent-secondary: #8b5cf6;
      --text-primary: #f1f5f9;
      --text-secondary: #94a3b8;
    }
    
    body {
      font-family: 'Poppins', sans-serif;
      background-color: var(--bg-primary);
      color: var(--text-primary);
      height: 100vh;
      overflow: hidden;
    }
    
    .gradient-bg {
      background: linear-gradient(135deg, #0f172a, #1e293b);
    }
    
    .sidebar {
      background-color: var(--bg-secondary);
      border-right: 1px solid rgba(255, 255, 255, 0.05);
    }
    
    .chat-area {
      background-color: var(--bg-primary);
    }
    
    .message-bubble {
      max-width: 70%;
      border-radius: 18px;
      padding: 12px 16px;
      margin-bottom: 12px;
      position: relative;
      animation: fadeIn 0.3s ease-out;
    }
    
    .sent {
      background: linear-gradient(to right, var(--accent-primary), var(--accent-secondary));
      align-self: flex-end;
      border-bottom-right-radius: 4px;
    }
    
    .received {
      background-color: var(--bg-tertiary);
      align-self: flex-start;
      border-bottom-left-radius: 4px;
    }
    
    .user-card:hover {
      background-color: var(--bg-tertiary);
      cursor: pointer;
    }
    
    .active-user {
      background-color: var(--bg-tertiary);
      border-left: 3px solid var(--accent-primary);
    }
    
    .input-field {
      background-color: var(--bg-secondary);
      border: 1px solid rgba(255, 255, 255, 0.1);
      transition: all 0.3s ease;
    }
    
    .input-field:focus {
      border-color: var(--accent-primary);
      box-shadow: 0 0 0 3px rgba(99, 102, 241, 0.3);
    }
    
    .send-btn {
      background: linear-gradient(to right, var(--accent-primary), var(--accent-secondary));
      transition: all 0.3s ease;
    }
    
    .send-btn:hover {
      transform: translateY(-2px);
      box-shadow: 0 4px 12px rgba(99, 102, 241, 0.3);
    }
    
    .status-indicator {
      width: 10px;
      height: 10px;
      border-radius: 50%;
      display: inline-block;
      margin-left: 8px;
    }
    
    .online {
      background-color: #10b981;
    }
    
    .offline {
      background-color: #64748b;
    }
    
    .modal-overlay {
      position: fixed;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background-color: rgba(0, 0, 0, 0.7);
      display: flex;
      align-items: center;
      justify-content: center;
      z-index: 1000;
    }
    
    .modal-content {
      background: linear-gradient(to bottom right, #1e293b, #0f172a);
      border-radius: 16px;
      box-shadow: 0 10px 25px rgba(0, 0, 0, 0.5);
      max-width: 400px;
      width: 90%;
      animation: modalIn 0.4s ease-out;
    }
    
    @keyframes fadeIn {
      from { opacity: 0; transform: translateY(10px); }
      to { opacity: 1; transform: translateY(0); }
    }
    
    @keyframes modalIn {
      from { opacity: 0; transform: translateY(-20px) scale(0.95); }
      to { opacity: 1; transform: translateY(0) scale(1); }
    }
    
    .scrollbar-hide::-webkit-scrollbar {
      display: none;
    }
    
    .scrollbar-hide {
      -ms-overflow-style: none;
      scrollbar-width: none;
    }
    
    .typing-indicator {
      display: inline-flex;
      align-items: center;
      padding: 8px 16px;
      background-color: var(--bg-tertiary);
      border-radius: 18px;
      font-size: 14px;
      color: var(--text-secondary);
    }
    
    .typing-dot {
      width: 6px;
      height: 6px;
      background-color: var(--text-secondary);
      border-radius: 50%;
      margin: 0 2px;
      animation: typing 1.4s infinite ease-in-out;
    }
    
    .typing-dot:nth-child(1) { animation-delay: 0s; }
    .typing-dot:nth-child(2) { animation-delay: 0.2s; }
    .typing-dot:nth-child(3) { animation-delay: 0.4s; }
    
    @keyframes typing {
      0%, 60%, 100% { transform: translateY(0); }
      30% { transform: translateY(-5px); }
    }
  </style>
</head>
<body class="gradient-bg">
  <div id="app" class="flex h-screen">
    <!-- Modal for username setup -->
    <div id="usernameModal" class="modal-overlay hidden">
      <div class="modal-content p-8">
        <div class="text-center mb-6">
          <h2 class="text-2xl font-bold text-transparent bg-clip-text bg-gradient-to-r from-indigo-400 to-purple-500 mb-2">Welcome to TakaGalaxy!</h2>
          <p class="text-gray-300">Please set a username to start chatting</p>
        </div>
        
        <div class="mb-6">
          <label class="block text-gray-400 text-sm font-medium mb-2">Choose a Username</label>
          <input id="usernameInput" type="text" placeholder="Enter your username" class="w-full p-3 rounded-lg bg-gray-800 border border-gray-700 input-field focus:outline-none text-white" />
          <p id="usernameError" class="text-red-400 text-sm mt-2 hidden">Username must be at least 3 characters</p>
        </div>
        
        <button onclick="setUsername()" class="w-full bg-gradient-to-r from-indigo-500 to-purple-600 text-white py-3 rounded-lg font-medium hover:from-indigo-600 hover:to-purple-700 transition-all">Save Username</button>
      </div>
    </div>
    
    <!-- Sidebar -->
    <div class="sidebar w-80 flex flex-col">
      <!-- User profile -->
      <div class="p-4 flex items-center border-b border-gray-800">
        <div id="userAvatar" class="w-12 h-12 rounded-full bg-gradient-to-r from-indigo-500 to-purple-600 flex items-center justify-center text-white font-bold text-xl mr-3">
          U
        </div>
        <div>
          <div id="userName" class="font-semibold">User</div>
          <div class="text-xs text-gray-400 flex items-center">
            <span id="userStatus">Online</span>
            <span class="status-indicator online"></span>
          </div>
        </div>
      </div>
      
      <!-- Online users header -->
      <div class="px-4 py-3 text-gray-400 text-sm font-medium flex items-center justify-between">
        <span>DIRECT MESSAGES</span>
        <button id="logoutBtn" class="text-gray-400 hover:text-white transition-colors">
          <i class="fas fa-sign-out-alt"></i>
        </button>
      </div>
      
      <!-- User list -->
      <div id="userList" class="flex-1 overflow-y-auto scrollbar-hide p-2">
        <!-- Users will be populated here -->
      </div>
    </div>
    
    <!-- Main chat area -->
    <div class="flex-1 flex flex-col chat-area">
      <!-- Chat header -->
      <div id="chatHeader" class="p-4 border-b border-gray-800 flex items-center">
        <div class="w-10 h-10 rounded-full bg-gradient-to-r from-amber-500 to-orange-500 flex items-center justify-center text-white font-bold text-lg mr-3">
          F
        </div>
        <div>
          <div class="font-semibold">Friend</div>
          <div id="typingIndicator" class="text-xs text-gray-400 hidden">
            <div class="typing-indicator">
              <span>typing</span>
              <div class="typing-dot"></div>
              <div class="typing-dot"></div>
              <div class="typing-dot"></div>
            </div>
          </div>
        </div>
      </div>
      
      <!-- Messages container -->
      <div id="messagesContainer" class="flex-1 overflow-y-auto p-4 scrollbar-hide flex flex-col">
        <!-- Messages will be populated here -->
        <div class="text-center text-gray-500 text-sm py-8">
          Start a conversation with someone by selecting a user from the sidebar
        </div>
      </div>
      
      <!-- Message input -->
      <div class="p-4 border-t border-gray-800">
        <div class="flex items-center">
          <input id="messageInput" type="text" placeholder="Type a message..." class="flex-1 p-3 rounded-l-lg input-field focus:outline-none text-white" disabled />
          <button id="sendBtn" class="send-btn text-white py-3 px-6 rounded-r-lg font-medium" disabled>
            <i class="fas fa-paper-plane"></i>
          </button>
        </div>
      </div>
    </div>
  </div>

  <script>
    // Initialize Supabase
    const supabase = window.supabase.createClient(
      'https://vmronlbzksuiikspvlvz.supabase.co',
      'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InZtcm9ubGJ6a3N1aWlrc3B2bHZ6Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDk5ODMwNTcsImV4cCI6MjA2NTU1OTA1N30.WMKbpJn1aavkwQDmsYq_-4EMSLL9tc4LexpmRSCsmSM'
    );
    
    // Global state
    let currentUser = null;
    let selectedUser = null;
    let usernameSet = false;
    let channel = null;
    
    // DOM Elements
    const usernameModal = document.getElementById('usernameModal');
    const usernameInput = document.getElementById('usernameInput');
    const usernameError = document.getElementById('usernameError');
    const userAvatar = document.getElementById('userAvatar');
    const userName = document.getElementById('userName');
    const userStatus = document.getElementById('userStatus');
    const userList = document.getElementById('userList');
    const chatHeader = document.getElementById('chatHeader');
    const messagesContainer = document.getElementById('messagesContainer');
    const messageInput = document.getElementById('messageInput');
    const sendBtn = document.getElementById('sendBtn');
    const logoutBtn = document.getElementById('logoutBtn');
    const typingIndicator = document.getElementById('typingIndicator');
    
    // Initialize the application
    async function initApp() {
      // Check auth status
      const { data: { user } } = await supabase.auth.getUser();
      
      if (!user) {
        // Redirect to login if not authenticated
        window.location.href = 'index.html';
        return;
      }
      
      currentUser = user;
      
      // Set user avatar with first letter
      const firstLetter = user.email ? user.email.charAt(0).toUpperCase() : 'U';
      userAvatar.innerHTML = firstLetter;
      userAvatar.className = `w-12 h-12 rounded-full bg-gradient-to-r from-indigo-500 to-purple-600 flex items-center justify-center text-white font-bold text-xl mr-3`;
      
      // Check if username is set
      await checkUsername();
      
      // Load other users
      await loadUsers();
      
      // Set up event listeners
      setupEventListeners();
      
      // Update user status to online
      updateUserStatus(true);
    }
    
    // Check if username is set
    async function checkUsername() {
      const { data, error } = await supabase
        .from('profiles')
        .select('username')
        .eq('id', currentUser.id)
        .single();
        
      if (error || !data || !data.username) {
        // Show username modal
        usernameModal.classList.remove('hidden');
      } else {
        usernameSet = true;
        userName.textContent = data.username;
      }
    }
    
    // Set username
    async function setUsername() {
      const username = usernameInput.value.trim();
      
      if (username.length < 3) {
        usernameError.classList.remove('hidden');
        return;
      }
      
      // Save username to profiles table
      const { error } = await supabase
        .from('profiles')
        .upsert({
          id: currentUser.id,
          username: username,
          email: currentUser.email
        });
        
      if (error) {
        console.error('Error setting username:', error);
        return;
      }
      
      usernameSet = true;
      userName.textContent = username;
      usernameModal.classList.add('hidden');
    }
    
    // Load other users
    async function loadUsers() {
      const { data: users, error } = await supabase
        .from('profiles')
        .select('id, username, email, status')
        .neq('id', currentUser.id);
        
      if (error) {
        console.error('Error loading users:', error);
        return;
      }
      
      userList.innerHTML = '';
      
      users.forEach(user => {
        const userElement = document.createElement('div');
        userElement.className = 'user-card p-3 rounded-lg mb-1 flex items-center transition-colors';
        userElement.innerHTML = `
          <div class="w-10 h-10 rounded-full bg-gradient-to-r from-amber-500 to-orange-500 flex items-center justify-center text-white font-bold text-lg mr-3">
            ${user.username ? user.username.charAt(0).toUpperCase() : user.email.charAt(0).toUpperCase()}
          </div>
          <div>
            <div class="font-medium">${user.username || user.email}</div>
            <div class="text-xs text-gray-400 flex items-center">
              ${user.status || 'offline'}
              <span class="status-indicator ${user.status === 'online' ? 'online' : 'offline'}"></span>
            </div>
          </div>
        `;
        
        userElement.addEventListener('click', () => selectUser(user));
        userList.appendChild(userElement);
      });
    }
    
    // Select a user to chat with
    function selectUser(user) {
      selectedUser = user;
      
      // Highlight selected user
      document.querySelectorAll('.user-card').forEach(el => {
        el.classList.remove('active-user');
      });
      event.currentTarget.classList.add('active-user');
      
      // Update chat header
      chatHeader.innerHTML = `
        <div class="w-10 h-10 rounded-full bg-gradient-to-r from-amber-500 to-orange-500 flex items-center justify-center text-white font-bold text-lg mr-3">
          ${user.username ? user.username.charAt(0).toUpperCase() : user.email.charAt(0).toUpperCase()}
        </div>
        <div>
          <div class="font-semibold">${user.username || user.email}</div>
          <div id="typingIndicator" class="text-xs text-gray-400 hidden">
            <div class="typing-indicator">
              <span>typing</span>
              <div class="typing-dot"></div>
              <div class="typing-dot"></div>
              <div class="typing-dot"></div>
            </div>
          </div>
        </div>
      `;
      
      // Enable message input
      messageInput.disabled = false;
      sendBtn.disabled = false;
      
      // Load messages
      loadMessages();
      
      // Set up real-time channel
      setupRealtime();
    }
    
    // Load messages between current user and selected user
    async function loadMessages() {
      messagesContainer.innerHTML = '';
      
      if (!selectedUser) return;
      
      const { data: messages, error } = await supabase
        .from('messages')
        .select('*')
        .or(`and(sender_id.eq.${currentUser.id},receiver_id.eq.${selectedUser.id}),and(sender_id.eq.${selectedUser.id},receiver_id.eq.${currentUser.id})`)
        .order('created_at', { ascending: true });
        
      if (error) {
        console.error('Error loading messages:', error);
        return;
      }
      
      if (messages.length === 0) {
        messagesContainer.innerHTML = `
          <div class="text-center text-gray-500 text-sm py-8">
            No messages yet. Start the conversation!
          </div>
        `;
        return;
      }
      
      messages.forEach(message => {
        addMessageToUI(message);
      });
      
      // Scroll to bottom
      messagesContainer.scrollTop = messagesContainer.scrollHeight;
    }
    
    // Add message to UI
    function addMessageToUI(message) {
      const isCurrentUser = message.sender_id === currentUser.id;
      const messageElement = document.createElement('div');
      
      messageElement.className = `message-bubble ${isCurrentUser ? 'sent' : 'received'}`;
      messageElement.innerHTML = `
        <div class="message-text">${message.content}</div>
        <div class="message-time text-xs opacity-70 mt-1 text-right">${formatTime(message.created_at)}</div>
      `;
      
      messagesContainer.appendChild(messageElement);
      
      // Scroll to bottom
      messagesContainer.scrollTop = messagesContainer.scrollHeight;
    }
    
    // Format time for display
    function formatTime(dateString) {
      const date = new Date(dateString);
      return date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
    }
    
    // Send message
    async function sendMessage() {
      const content = messageInput.value.trim();
      
      if (!content || !selectedUser) return;
      
      const { error } = await supabase
        .from('messages')
        .insert({
          sender_id: currentUser.id,
          receiver_id: selectedUser.id,
          content: content
        });
        
      if (error) {
        console.error('Error sending message:', error);
        return;
      }
      
      // Clear input
      messageInput.value = '';
      
      // Add message to UI immediately
      const tempMessage = {
        sender_id: currentUser.id,
        content: content,
        created_at: new Date().toISOString()
      };
      
      addMessageToUI(tempMessage);
    }
    
    // Set up real-time messaging
    function setupRealtime() {
      // Close previous channel if exists
      if (channel) {
        supabase.removeChannel(channel);
      }
      
      // Create a new channel
      channel = supabase.channel(`chat:${currentUser.id}-${selectedUser.id}`, {
        config: {
          presence: {
            key: currentUser.id
          }
        }
      })
      .on('postgres_changes', {
        event: 'INSERT',
        schema: 'public',
        table: 'messages',
        filter: `sender_id=eq.${selectedUser.id}`
      }, (payload) => {
        if (payload.new.receiver_id === currentUser.id) {
          addMessageToUI(payload.new);
        }
      })
      .on('presence', { event: 'sync' }, () => {
        const state = channel.presenceState();
        // Update user statuses based on presence
      })
      .subscribe();
    }
    
    // Update user status
    async function updateUserStatus(isOnline) {
      const status = isOnline ? 'online' : 'offline';
      
      // Update UI
      userStatus.textContent = status;
      
      // Update in database
      await supabase
        .from('profiles')
        .update({ status: status })
        .eq('id', currentUser.id);
    }
    
    // Set up event listeners
    function setupEventListeners() {
      // Send message on button click
      sendBtn.addEventListener('click', sendMessage);
      
      // Send message on Enter key
      messageInput.addEventListener('keypress', (e) => {
        if (e.key === 'Enter' && !e.shiftKey) {
          e.preventDefault();
          sendMessage();
        }
      });
      
      // Logout button
      logoutBtn.addEventListener('click', async () => {
        await supabase.auth.signOut();
        window.location.href = 'index.html';
      });
      
      // Update status when window gains/loses focus
      window.addEventListener('focus', () => updateUserStatus(true));
      window.addEventListener('blur', () => updateUserStatus(false));
      
      // Update status before page unload
      window.addEventListener('beforeunload', () => updateUserStatus(false));
    }
    
    // Initialize the app when the page loads
    document.addEventListener('DOMContentLoaded', initApp);
  </script>
</body>
</html>