<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <title>TAKA AI Control Panel</title>
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <script src="https://cdn.tailwindcss.com"></script>
  <style>
    /* Optional: Add some custom scrollbar styling for the output if it gets long */
    #aiOutput {
      white-space: pre-wrap; /* Preserves whitespace and wraps text */
      word-wrap: break-word; /* Breaks long words */
      max-height: 300px; /* Max height before scrolling */
      overflow-y: auto; /* Adds scrollbar if content overflows */
    }
  </style>
</head>
<body class="bg-gray-900 text-white p-4">
  <h1 class="text-3xl font-bold mb-6 text-center">TAKA AI Control Panel</h1>

  <div id="adminContent" style="display:none;" class="max-w-3xl mx-auto bg-gray-800 p-6 rounded-lg shadow-lg">
    <h2 class="text-xl font-semibold mb-4 border-b border-gray-700 pb-2">Manage AI Modes</h2>
    <div class="mb-6 space-y-3">
      <input id="modeName" placeholder="Mode Name" class="w-full p-2 rounded bg-gray-700 border border-gray-600 focus:outline-none focus:border-blue-500" />
      <input id="modeDesc" placeholder="Mode Description" class="w-full p-2 rounded bg-gray-700 border border-gray-600 focus:outline-none focus:border-blue-500" />
      <input id="modeModel" placeholder="Model (e.g. deepseek-ai/DeepSeek-V3-0324)" class="w-full p-2 rounded bg-gray-700 border border-gray-600 focus:outline-none focus:border-blue-500" />
      <select id="modeAccessType" class="w-full p-2 rounded bg-gray-700 border border-gray-600 focus:outline-none focus:border-blue-500">
        <option value="free">Free</option>
        <option value="paid">Paid</option>
      </select>
      <div class="flex space-x-2 mt-4">
        <button id="saveBtn" class="flex-1 bg-green-600 hover:bg-green-700 px-4 py-2 rounded font-semibold transition duration-200 ease-in-out">Save Mode</button>
        <button id="cancelBtn" class="flex-1 bg-gray-600 hover:bg-gray-700 px-4 py-2 rounded font-semibold transition duration-200 ease-in-out">Cancel</button>
      </div>
    </div>

    <h2 class="text-xl font-semibold mb-4 border-b border-gray-700 pb-2">All Modes</h2>
    <div id="modeList" class="space-y-3">
      </div>

    <h2 class="text-xl font-semibold mt-8 mb-4 border-b border-gray-700 pb-2">Test an AI Mode</h2>
    <div class="mb-6 p-4 rounded bg-gray-700 border border-gray-600">
      <label for="selectModeToUse" class="block text-sm font-medium text-gray-300 mb-1">Select Mode:</label>
      <select id="selectModeToUse" class="w-full p-2 mb-3 rounded bg-gray-800 border border-gray-600 focus:outline-none focus:border-blue-500">
        <option value="">-- Select an AI Mode --</option>
      </select>

      <label for="aiInput" class="block text-sm font-medium text-gray-300 mb-1">Your Prompt:</label>
      <textarea id="aiInput" placeholder="Enter your prompt here..." class="w-full p-2 mb-3 rounded bg-gray-800 border border-gray-600 h-24 resize-y focus:outline-none focus:border-blue-500"></textarea>

      <button id="runAiBtn" class="w-full bg-blue-600 hover:bg-blue-700 px-4 py-2 rounded font-semibold transition duration-200 ease-in-out">Run AI</button>

      <div class="mt-4">
        <label class="block text-sm font-medium text-gray-300 mb-1">AI Response:</label>
        <div id="aiOutput" class="p-3 rounded bg-gray-800 border border-gray-600 text-gray-300 min-h-[80px]">
          AI Response will appear here...
        </div>
      </div>
    </div>
  </div>

  <div id="accessDenied" class="hidden text-center mt-10 p-6 rounded-lg bg-red-900 text-red-300 border border-red-700 text-xl font-bold">ðŸš« Access Denied. Admins only.</div>

  <script type="module">
    import { createClient } from "https://cdn.jsdelivr.net/npm/@supabase/supabase-js/+esm";

    const supabase = createClient(
      'https://vmronlbzksuiikspvlvz.supabase.co', // Replace with your Supabase URL
      'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InZtcm9ubGJ6a3N1aWlrc3B2bHZ6Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDk5ODMwNTcsImV4cCI6MjA2NTU1OTA1N30.WMKbpJn1aavkwQDmsYq_-4EMSLL9tc4LexpmRSCsmSM' // Replace with your Supabase Anon Key
    );

    const nameInput = document.getElementById('modeName');
    const descInput = document.getElementById('modeDesc');
    const modelInput = document.getElementById('modeModel');
    const accessTypeInput = document.getElementById('modeAccessType'); // New: Access Type input
    const saveBtn = document.getElementById('saveBtn');
    const cancelBtn = document.getElementById('cancelBtn');
    const modeList = document.getElementById('modeList');
    const adminContent = document.getElementById('adminContent');
    const accessDenied = document.getElementById('accessDenied');

    // AI interaction elements
    const selectModeToUse = document.getElementById('selectModeToUse');
    const aiInput = document.getElementById('aiInput');
    const runAiBtn = document.getElementById('runAiBtn');
    const aiOutput = document.getElementById('aiOutput');

    let editingId = null;
    let currentUser = null; // To store the logged-in user object

    // --- Authentication Check ---
    async function checkAuthAndLoadContent() {
      const { data: { user }, error: authError } = await supabase.auth.getUser();

      if (authError || !user) {
        console.warn("User not logged in or error getting user:", authError);
        alert("You are not logged in. Redirecting to login page.");
        window.location.href = "/login.html"; // Ensure you have a login.html
        return;
      }

      currentUser = user; // Store the user object

      // Check if the user is an admin
      const { data: adminCheck, error: adminError } = await supabase
        .from("admins") // Assuming you have an 'admins' table with user IDs
        .select("*")
        .eq("id", user.id)
        .single();

      if (adminError || !adminCheck) {
        console.error("Access denied for user:", user.id, adminError);
        adminContent.style.display = 'none';
        accessDenied.classList.remove("hidden");
        // Optionally, you could redirect non-admins to a different page
        // window.location.href = "/user_dashboard.html";
      } else {
        adminContent.style.display = 'block';
        accessDenied.classList.add("hidden");
        loadModes();
        setupRealtime();
      }
    }

    // --- Load Modes Function ---
    async function loadModes() {
      const { data: modes, error } = await supabase.from('modes').select('*').order('id', { ascending: false });
      if (error) {
        console.error("Failed to load modes:", error);
        return;
      }

      modeList.innerHTML = '';
      selectModeToUse.innerHTML = '<option value="">-- Select an AI Mode --</option>'; // Clear and add default option

      modes.forEach(mode => {
        // Add to mode management list
        const div = document.createElement('div');
        div.className = 'p-3 rounded bg-gray-800 border border-gray-700 flex justify-between items-center';
        div.innerHTML = `
          <div>
            <p class="font-bold">${mode.name}</p>
            <p class="text-sm text-gray-400">${mode.description}</p>
            <p class="text-sm text-gray-500">Model: ${mode.model}</p>
            <p class="text-sm text-gray-500">Access: <span class="capitalize font-semibold">${mode.access_type || 'N/A'}</span></p> <p class="text-sm mt-1">Status: <span class="font-semibold ${mode.enabled ? 'text-green-400' : 'text-red-400'}">${mode.enabled ? 'Enabled' : 'Disabled'}</span></p>
          </div>
          <div class="space-x-2">
            <button data-id="${mode.id}" class="toggleBtn bg-yellow-600 hover:bg-yellow-700 px-2 py-1 rounded text-sm transition duration-200 ease-in-out">${mode.enabled ? 'Disable' : 'Enable'}</button>
            <button data-id="${mode.id}" class="editBtn bg-blue-600 hover:bg-blue-700 px-2 py-1 rounded text-sm transition duration-200 ease-in-out">Edit</button>
            <button data-id="${mode.id}" class="deleteBtn bg-red-600 hover:bg-red-700 px-2 py-1 rounded text-sm transition duration-200 ease-in-out">Delete</button>
          </div>
        `;
        modeList.appendChild(div);

        // Add to the "Try an AI Mode" dropdown if enabled
        if (mode.enabled) {
          const option = document.createElement('option');
          option.value = JSON.stringify(mode); // Store entire mode object as string
          option.textContent = `${mode.name} (${mode.access_type ? mode.access_type.charAt(0).toUpperCase() + mode.access_type.slice(1) : 'N/A'}) - ${mode.model}`;
          selectModeToUse.appendChild(option);
        }
      });

      attachEventListeners();
    }

    // --- Attach Event Listeners for Mode Management ---
    function attachEventListeners() {
      document.querySelectorAll('.toggleBtn').forEach(btn => {
        btn.onclick = async () => {
          const id = btn.dataset.id;
          const { data, error } = await supabase.from('modes').select('enabled').eq('id', id).single();
          if (error) {
            console.error("Error fetching mode for toggle:", error);
            alert("Error toggling mode status.");
            return;
          }
          await supabase.from('modes').update({ enabled: !data.enabled }).eq('id', id);
        };
      });

      document.querySelectorAll('.editBtn').forEach(btn => {
        btn.onclick = async () => {
          const id = btn.dataset.id;
          const { data, error } = await supabase.from('modes').select('*').eq('id', id).single();
          if (error) {
            console.error("Error fetching mode for edit:", error);
            alert("Error fetching mode for editing.");
            return;
          }

          nameInput.value = data.name;
          descInput.value = data.description;
          modelInput.value = data.model;
          accessTypeInput.value = data.access_type || 'free'; // Set dropdown value
          editingId = id;
        };
      });

      document.querySelectorAll('.deleteBtn').forEach(btn => {
        btn.onclick = async () => {
          const id = btn.dataset.id;
          if (confirm("Are you sure you want to delete this mode? This action cannot be undone.")) {
            const { error } = await supabase.from('modes').delete().eq('id', id);
            if (error) {
              console.error("Error deleting mode:", error);
              alert("Error deleting mode.");
            }
          }
        };
      });
    }

    // --- Save/Update Mode Handler ---
    saveBtn.onclick = async () => {
      const name = nameInput.value.trim();
      const desc = descInput.value.trim();
      const model = modelInput.value.trim();
      const accessType = accessTypeInput.value; // Get selected access type

      if (!name || !desc || !model || !accessType) {
        alert("Please fill in all fields (Mode Name, Description, Model, and select Access Type).");
        return;
      }

      if (editingId) {
        const { error } = await supabase.from('modes').update({ name, description: desc, model, access_type: accessType }).eq('id', editingId);
        if (error) {
          console.error("Error updating mode:", error);
          alert("Error updating mode.");
        }
        editingId = null;
      } else {
        const { error } = await supabase.from('modes').insert([{ name, description: desc, model, enabled: true, access_type: accessType }]);
        if (error) {
          console.error("Error creating mode:", error);
          alert("Error creating new mode.");
        }
      }

      // Clear form
      nameInput.value = '';
      descInput.value = '';
      modelInput.value = '';
      accessTypeInput.value = 'free'; // Reset to default
    };

    // --- Cancel Edit Handler ---
    cancelBtn.onclick = () => {
      nameInput.value = '';
      descInput.value = '';
      modelInput.value = '';
      accessTypeInput.value = 'free'; // Reset to default
      editingId = null;
    };

    // --- Realtime Supabase Updates ---
    function setupRealtime() {
      supabase.channel('modes-changes')
        .on('postgres_changes', { event: '*', schema: 'public', table: 'modes' }, (payload) => {
          console.log('Change received!', payload);
          loadModes(); // Refresh UI on any insert/update/delete
        })
        .subscribe();
    }

    // --- Run AI Button Logic (Placeholder for your Backend API) ---
    runAiBtn.onclick = async () => {
      const selectedOption = selectModeToUse.value;
      const prompt = aiInput.value.trim();

      if (!selectedOption) {
        alert("Please select an AI Mode to use.");
        return;
      }
      if (!prompt) {
        alert("Please enter a prompt for the AI.");
        return;
      }

      let selectedMode;
      try {
        selectedMode = JSON.parse(selectedOption);
      } catch (e) {
        console.error("Error parsing selected mode JSON:", e);
        aiOutput.textContent = "Error: Invalid mode selected.";
        return;
      }

      aiOutput.textContent = "Thinking..."; // Show loading state

      try {
        // *******************************************************************
        // IMPORTANT: This is where you would call YOUR BACKEND API.
        // Your backend API would handle the actual call to the AI model
        // (e.g., DeepSeek, OpenAI, etc.) and manage API keys, usage limits,
        // and "free" vs "paid" access based on the user's plan and mode's access_type.
        // *******************************************************************

        const token = (await supabase.auth.getSession()).data.session.access_token;
        if (!token) {
          aiOutput.textContent = "Error: Not authenticated. Please log in again.";
          return;
        }

        const backendApiUrl = 'YOUR_BACKEND_API_ENDPOINT_HERE'; // <--- **REPLACE THIS**
        // Example: 'https://your-server.com/api/run-ai'

        if (backendApiUrl === 'YOUR_BACKEND_API_ENDPOINT_HERE') {
            aiOutput.textContent = "Warning: AI functionality is not configured. Please set up your backend API endpoint.";
            return;
        }

        const response = await fetch(backendApiUrl, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${token}` // Send Supabase JWT for backend authentication
          },
          body: JSON.stringify({
            modeId: selectedMode.id,
            modeName: selectedMode.name,
            modeDescription: selectedMode.description,
            model: selectedMode.model,
            accessType: selectedMode.access_type,
            prompt: prompt
          })
        });

        if (!response.ok) {
          const errorData = await response.json();
          throw new Error(errorData.message || `API request failed with status ${response.status}`);
        }

        const data = await response.json();
        aiOutput.textContent = data.aiResponse || "No response from AI."; // Assuming your backend returns { aiResponse: "..." }

      } catch (error) {
        console.error("Error running AI:", error);
        aiOutput.textContent = `Error: ${error.message}. Please check your backend API and network connection.`;
      }
    };

    // Initial check and load
    checkAuthAndLoadContent();
  </script>
</body>
</html>
